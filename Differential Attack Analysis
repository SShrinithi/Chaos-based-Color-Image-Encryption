
# ====================== ATTACK 1: CROPPING ======================

def apply_center_cropping_attack(encrypted_img, crop_ratio=0.25):
    h, w, c = encrypted_img.shape
    crop_h, crop_w = int(h * crop_ratio), int(w * crop_ratio)

    start_h = (h - crop_h) // 2
    start_w = (w - crop_w) // 2

    attacked = encrypted_img.copy()
    attacked[start_h:start_h + crop_h, start_w:start_w + crop_w, :] = 0  # black out center crop
    return attacked

# ====================== ATTACK 2: SALT & PEPPER ======================

def apply_salt_and_pepper_attack(encrypted_img, amount=0.02):
    noisy = encrypted_img.copy()
    h, w, c = encrypted_img.shape
    num_salt = int(amount * h * w)
    num_pepper = int(amount * h * w)

    coords = [np.random.randint(0, i - 1, num_salt) for i in (h, w)]
    noisy[coords[0], coords[1], :] = 255

    coords = [np.random.randint(0, i - 1, num_pepper) for i in (h, w)]
    noisy[coords[0], coords[1], :] = 0

    return noisy

# ====================== ATTACK 3: CHOSEN PLAINTEXT ======================

def chosen_plaintext_attack(shape):
    black_img = np.zeros(shape, dtype=np.uint8)
    white_img = np.ones(shape, dtype=np.uint8) * 255

    encrypted_black, *_ = encrypt(black_img)
    encrypted_white, *_ = encrypt(white_img)

    # Calculate NPCR and UACI between the encrypted images
    npcr = calculate_npcr(encrypted_black, encrypted_white)
    uaci = calculate_uaci(encrypted_black, encrypted_white)

    return encrypted_black, encrypted_white, npcr, uaci
